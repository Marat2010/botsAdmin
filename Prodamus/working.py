from collections.abc import MutableMapping
from urllib.parse import urlencode


def generate_payment_link():
    # URL платежной формы
    linktoform = 'https://volynets.payform.ru/'

    # Секретный ключ. Можно найти на странице настроек,
    # в личном кабинете платежной формы
    secret_key = 'b635e5ee4d74271eb64926ebb07f71dd0194ac01ab490577d9035d12e5c813b2'

    data = {
        # хххх - номер заказ в системе интернет-магазина
        'order_id': 7,

        # +7хххххххххх - мобильный телефон клиента
        'customer_phone': '+79199485553',

        # ИМЯ@prodamus.ru - e-mail адрес клиента
        #'customer_email': 'ИМЯ@prodamus.ru',
        'customer_email': 'volynec-s@bk.ru',


        # перечень товаров заказа
        'products': [
            {
                # id товара в системе интернет-магазина
                # (не обязательно) - при необходимоти прописать
                'sku': 'sku01',

                # название товара - необходимо прописать название вашего товара
                # //          (обязательный параметр)
                'name': 'test good',

                # цена за единицу товара, 123 - значение, которое нужно прописать
                # (обязательный параметр)
                'price': '50',

                # количество товара, х - значение, которое нужно прописать
                # (обязательный параметр)
                'quantity': '1',

                # данные о налоге
                # (не обязательно, если не указано будет взято из настроек Магазина
                # на стороне системы)
                # 'tax': {
                #     # ставка НДС, с возможными значениями (при необходимоти заменить):
                #     # 0 – без НДС;
                #     # 1 – НДС по ставке 0%;
                #     # 2 – НДС чека по ставке 10%;
                #     # 3 – НДС чека по ставке 18%;
                #     # 4 – НДС чека по расчетной ставке 10/110;
                #     # 5 – НДС чека по расчетной ставке 18/118.
                #     # 6 - НДС чека по ставке 20%;
                #     # 7 - НДС чека по расчётной ставке 20/120.
                #     'tax_type': 0,
                #
                #     # (не обязательно) сумма налога, хх - при необходимости заменить
                #     'tax_sum': хх,
                # },

                #  Тип оплаты, с возможными значениями (при необходимости заменить):
                # 	1 - полная предварительная оплата до момента передачи предмета расчёта;
                # 	2 - частичная предварительная оплата до момента передачи
                #       предмета расчёта;
                # 	3 - аванс;
                # 	4 - полная оплата в момент передачи предмета расчёта;
                # 	5 - частичная оплата предмета расчёта в момент его передачи
                #       с последующей оплатой в кредит;
                # 	6 - передача предмета расчёта без его оплаты в момент
                #       его передачи с последующей оплатой в кредит;
                # 	7 - оплата предмета расчёта после его передачи с оплатой в кредит.
                #      (не обязательно, если не указано будет взято из настроек
                #      Магазина на стороне системы)
                # 'paymentMethod': х,

                #  Тип оплачиваемой позиции, с возможными
                #      значениями (при необходимости заменить):
                # 	1 - товар;
                # 	2 - подакцизный товар;
                # 	3 - работа;
                # 	4 - услуга;
                # 	5 - ставка азартной игры;
                # 	6 - выигрыш азартной игры;
                # 	7 - лотерейный билет;
                # 	8 - выигрыш лотереи;
                # 	9 - предоставление РИД;
                # 	10 - платёж;
                # 	11 - агентское вознаграждение;
                # 	12 - составной предмет расчёта;
                # 	13 - иной предмет расчёта.
                #  (не обязательно, если не указано будет взято из настроек Магазина на стороне системы)
                # 'paymentObject': х,
            },
        ],

        #  id подписки (при необходимости прописать)
        #  актуально и обязательно только для рекуррентных платежей,
        #            передается вместо параметра products
        #'subscription': 123,

        #  вк id пользователя (при необходимости прописать)
        #'vk_user_id': 123,

        # фио пользователя в ВК (при необходимости прописать)
        #'vk_user_name': 'Фамилия Имя Отчество',

        #  дополнительные данные
        #'customer_extra': 'Текст, который отобразится в поле "Дополнительные данные"',

        #  для интернет-магазинов доступно только действие "Оплата"
        'do': 'pay',

        #  url-адрес для возврата пользователя без оплаты
        #    (при необходимости прописать свой адрес)
        'urlReturn': 'https://demo.payform.ru/demo-return',

        # url-адрес для возврата пользователя при успешной оплате
        #    (при необходимости прописать свой адрес)
        'urlSuccess': 'https://demo.payform.ru/demo-success',

        #  служебный url-адрес для уведомления интернет-магазина
        #            о поступлении оплаты по заказу
        #  	         пока реализован только для Advantshop,
        #            формат данных настроен под систему интернет-магазина
        #            (при необходимости прописать свой адрес)
        'urlNotification': 'https://demo.payform.ru/demo-notification',

        #  код системы интернет-магазина, запросить у поддержки,
        #      для самописных систем можно оставлять пустым полем
        #      (при необходимости прописать свой код)
        'sys': 'bysviat',

        #  метод оплаты, выбранный клиентом
        #  	     если есть возможность выбора на стороне интернет-магазина,
        #  	     иначе клиент выбирает метод оплаты на стороне платежной формы
        #        варианты (при необходимости прописать значение):
        #  	AC - банковская карта
        #  	PC - Яндекс.Деньги
        #  	QW - Qiwi Wallet
        #  	WM - Webmoney
        #  	GP - платежный терминал
        #'payment_method': 'ХХ',

        #  сумма скидки на заказ
        #  	     указывается только в том случае, если скидка
        #        не прменена к товарным позициям на стороне интернет-магазина
        #  	     алгоритм распределения скидки по товарам
        #        настраивается на стороне пейформы
        'discount_value': 0.00,

        #  тип плательщика, с возможными значениями:
        #      FROM_INDIVIDUAL - Физическое лицо
        #      FROM_LEGAL_ENTITY - Юридическое лицо
        #      FROM_FOREIGN_AGENCY - Иностранная организация
        #      (не обязательно. если форма работает в режиме самозанятого
        #       значение по умолчанию: FROM_INDIVIDUAL)
        #'npd_income_type': 'FROM_INDIVIDUAL',

        #  инн плательщика (при необходимости прописат)
        #      (обязательно, если форма в режиме самозанятого
        #       и тип плательщика FROM_LEGAL_ENTITY)
        #'npd_income_inn': 1234567890,

        #  название компании плательщика (при необходимости прописать название)
        #           (обязательно, если форма в режиме самозанятого
        #            и тип плательщика FROM_LEGAL_ENTITY или FROM_FOREIGN_AGENCY)
        #'npd_income_company': 'Название компании плательщика',

        #  срок действия ссылки в формате: дд.мм.гггг чч:мм или гггг-мм-дд чч:мм
        #       при необходимости добавить дату
        #       (не обязательно, по умолчанию срок действия ссылки не ограничен)
        #'link_expired': 'дд.мм.гггг чч:мм',

        #  дата начала подписки в формате: дд.мм.гггг чч:мм или гггг-мм-дд чч:мм
        #       при необходимости добавить дату
        #       (не обязательно, актуально только для рекуррентных платежей,
        #        по умолчанию текущая дата/время)
        #'subscription_date_start': 'дд.мм.гггг чч:мм',

        #  текст который будет показан пользователю после совершения оплаты
        #    (не обязательно)
        'paid_content': 'Текс сообщения'
    }

    # подписываем с помощью кастомной функции sign (см ниже)
    data['signature'] = sign(data, secret_key)
    # компануем ссылку с помощью кастомной функции http_build_query (см ниже)
    link = linktoform + '?' + urlencode(http_build_query(data))

    return link


def sign(data, secret_key):
    import hashlib
    import hmac
    import json

    # переводим все значения data в string c помощью кастомной функции deep_int_to_string (см ниже)
    deep_int_to_string(data)

    # переводим data в JSON, с сортировкой ключей в алфавитном порядке, без пробелом и экранируем бэкслеши
    data_json = json.dumps(data, sort_keys=True, ensure_ascii=False, separators=(',', ':')).replace("/", "\\/")

    # создаем подпись с помощью библиотеки hmac и возвращаем ее
    return hmac.new(secret_key.encode('utf8'), data_json.encode('utf8'), hashlib.sha256).hexdigest()


def deep_int_to_string(dictionary):
    for key, value in dictionary.items():
        if isinstance(value, MutableMapping):
            deep_int_to_string(value)
        elif isinstance(value, list) or isinstance(value, tuple):
            for k, v in enumerate(value):
                deep_int_to_string({str(k): v})
        else:
            dictionary[key] = str(value)


def http_build_query(dictionary, parent_key=False):
    items = []
    for key, value in dictionary.items():
        new_key = str(parent_key) + '[' + key + ']' if parent_key else key
        if isinstance(value, MutableMapping):
            items.extend(http_build_query(value, new_key).items())
        elif isinstance(value, list) or isinstance(value, tuple):
            for k, v in enumerate(value):
                items.extend(http_build_query({str(k): v}, new_key).items())
        else:
            items.append((new_key, value))
    return dict(items)

print(generate_payment_link())
